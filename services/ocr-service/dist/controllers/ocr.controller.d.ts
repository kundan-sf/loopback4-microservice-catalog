import { Getter } from '@loopback/context';
import { IRequest } from '../../../../packages/fetch-client/dist';
import { OcrResults } from '../models';
import { OcrResultRepository } from '../repositories';
export declare class OcrController {
    ocrResultRepository: OcrResultRepository;
    private readonly requestProvider;
    constructor(ocrResultRepository: OcrResultRepository, requestProvider: Getter<IRequest>);
    getContractDocumentType(contractName: string): Promise<object>;
    getContractTerminationClause(contractName: string): Promise<object>;
    getContractIprOwnershipClause(contractName: string): Promise<object>;
    getContractWarrantyClause(contractName: string): Promise<object>;
    getContractThirdPartyBeneficiary(contractName: string): Promise<object>;
    getContractGoverningLaw(contractName: string): Promise<object>;
    getContractValidityTerms(contractName: string): Promise<object>;
    getContractLiquidityDamages(contractName: string): Promise<object>;
    getContractLimitedLiability(contractName: string): Promise<object>;
    getContractLegalId(contractName: string): Promise<object>;
    getContractSignatoryDetails(contractName: string): Promise<object>;
    getContractVendor(contractName: string): Promise<object>;
    getContractPaymentTerms(contractName: string): Promise<object>;
    getContractForceMajeure(contractName: string): Promise<object>;
    getContractIndemnityClause(contractName: string): Promise<object>;
    getContractAutoRenewal(contractName: string): Promise<object>;
    getContractCurrency(contractName: string): Promise<object>;
    getContractPublicAnnouncement(contractName: string): Promise<object>;
    getContractAssignment(contractName: string): Promise<object>;
    getContractSupport(contractName: string): Promise<object>;
    getContractContractAmount(contractName: string): Promise<object>;
    getContractSlaClause(contractName: string): Promise<object>;
    getContractSlaDashboard(contractName: string): Promise<object>;
    getContractClauses(contractName: string): Promise<OcrResults[]>;
    updateAll(clauses: [Pick<OcrResults, 'id' | 'text' | 'confidenceLevel'>]): Promise<any>;
    updateClauseById(id: string, clause: Omit<OcrResults, 'id'>): Promise<void>;
    replaceClauseById(id: string, clause: OcrResults): Promise<void>;
    deleteClauseById(id: string): Promise<void>;
}
